---
import Layout from "../layouts/Layout.astro";
import { words } from "../3000.js";
import search from "../icons/search.webp";
import arrow from "../icons/arrow.svg";
import arrow2 from "../icons/arrow2.svg";

// Mapear el objeto para obtener un array con las palabras en inglés y español
const mappedWords = Object.entries(words);
---

<Layout title="Most 3000 Common Words in English & Spanish">
	<div
		class="relative overflow-x-auto sm:rounded-lg flex flex-col items-center justify-center"
		id="section-div">
		<button
			onclick="window.location.href = '/';"
			class="fixed top-0 text-sm -right-2 flex items-center flex-col group important-text rounded-bl-3xl hover:-translate-x-2 hover:scale-105 transition h-[75px] active:scale-100 active:translate-x-0 z-20 opacity-75 hover:opacity-100">
			<img
				src={arrow2.src}
				alt="arrow go top image"
				class="-rotate-[140deg] w-[25px] group-hover:scale-105 transition-all duration-250"
			/>
			<span class="text-black font-semibold"> Go Back </span>
		</button>
		<article class="xl:flex items-center justify-center h-full hidden z-10">
			<div
				class="flex items-center justify-center flex-col fixed bottom-0 top-0 left-[5%] w-[35vw] text-[#111827]"
				id="text-container">
				<p class="text-5xl font-black sm:text-1xl text-center">
					Most <br /> Common
				</p>
				<h1
					class="text-7xl font-black sm:text-1xl text-center md:py-5 mt-1 rounded-3xl overflow-hidden">
					<strong class="important-text">3000</strong>
				</h1>
				<span
					class="absolute whitespace-nowrap -translate-y-16 -rotate-12 text-7xl font-black text-center">
					Words <code
						class="text-4xl lg:text-5xl font-black sm:text-1xl text-center bg-gradient-to-r from-[#f12711] to-[#ff7b22] text-transparent bg-clip-text"
						>in</code
					>
				</span>
				<span
					class="flex -translate-y-32 items-center pt-40 text-5xl font-black flex-col text-center text-[#111827]">
					<span
						class="bg-gradient-to-r from-[#f12711] to-[#ff7b22] text-transparent bg-clip-text h-[70px]"
						>English</span
					>
					<img
						src={arrow.src}
						class="w-[75px] -my-4 rotate-45"
						alt=""
					/> Spanish
				</span>

				<p
					id="marked-count"
					class="text-8xl font-black fixed translate-y-44 text-center bg-gradient-to-r from-[#f12711] to-[#ff7b22] text-transparent bg-clip-text">
				</p>
			</div>
			<div
				class="flex items-center justify-center flex-col fixed bottom-0 top-0 right-0 z-20 h-fit m-auto">
				<img
					id="search-img"
					src={search.src}
					class="w-[500px] -rotate-12"
					alt=""
				/>

				<p
					id="hovered-word"
					class="text-2xl absolute transition delay-75 whitespace-nowrap">
					&nbsp;
				</p>
			</div>
		</article>
		<button
			onclick="window.scrollTo({
				top: 0,
				behavior: 'smooth'
				});"
			class="fixed right-0 sm:left-0 text-sm -bottom-5 flex items-center flex-col group important-text rounded-t-3xl hover:-translate-y-2 hover:scale-105 transition size-[85px] active:scale-100 active:translate-y-0 opacity-75 hover:opacity-100 z-40">
			<img
				src={arrow2.src}
				alt="arrow go top image"
				class="-rotate-45 w-[25px] group-hover:scale-110 transition-all duration-250"
			/>
			<span class="text-black font-semibold mt-1"> Go Top </span>
		</button>

		<table
			id="words-table"
			class="w-full sm:max-w-[400px] mt-20 mb-10 md:mb-0 text-center text-gray-400 z-0">
			<thead class="important-text fixed w-full sm:max-w-[400px] top-0">
				<tr
					class="flex items-center jutify-between w-full text-center py-3 sm:py-2 text-base sm:text-3xl">
					<th scope="col" class="w-full">English</th>
					<th scope="col" class="w-full">Español</th>
				</tr>
			</thead>
			<tbody>
				{
					mappedWords.map(([english, spanish], index) => (
						<tr
							class="group border-b border-gray-700  hover:bg-gray-600 bg-gray-900 
							font-semibold text-base hover:cursor-crosshair"
							data-english={english}
							data-spanish={spanish}>
							<td class=" py-1 w-1/2 tex-center text-gray-300">
								{english}
							</td>
							<td class=" py-1 w-1/2 tex-center text-gray-300">
								{spanish}
							</td>
						</tr>
					))
				}
			</tbody>
		</table>
		<!-- <input type="text" /> -->
	</div>
</Layout>

<script is:inline>
	document.addEventListener("DOMContentLoaded", () => {
		const hoveredWordElement = document.getElementById("hovered-word");
		const markedCountElement = document.getElementById("marked-count");

		const searchInputContainer = document.createElement("div");
		searchInputContainer.classList.add(
			"fixed",
			"bottom-0",
			"right-0",
			"w-full",
			"max-w-[400px]",
			"z-30",
			"flex",
			"rounded-t-3xl",
			"overflow-hidden"
		);

		const searchInput = document.createElement("input");
		searchInput.type = "text";
		searchInput.placeholder = "Search for a word...";
		searchInput.classList.add(
			"px-6",
			"py-2",
			"bg-gray-900",
			"text-gray-300",
			"border-t",
			"border-gray-700",
			"focus:outline-none",
			"w-full"
		);

		const deleteButton = document.createElement("button");
		deleteButton.textContent = "✕";
		deleteButton.classList.add(
			"pl-4",
			"pr-6",
			"font-black",
			"hover:bg-[#f12711]",
			"hover:text-white",
			"active:outline",
			"transition",
			"py-2",
			"bg-[#ff7b22]",
			"text-white",
			"cursor-pointer",
			"focus:outline-none"
		);

		searchInputContainer.appendChild(searchInput);
		searchInputContainer.appendChild(deleteButton);
		document.body.appendChild(searchInputContainer);

		const englishWordElement = document.createElement("p");
		const spanishWordElement = document.createElement("p");

		englishWordElement.style.fontSize = "1em";
		englishWordElement.style.fontWeight = "900";
		englishWordElement.style.position = "absolute";
		englishWordElement.style.top = "1.25em";
		englishWordElement.style.left = "-6.5em";
		englishWordElement.style.color = "#111827";

		spanishWordElement.style.fontSize = "1em";
		spanishWordElement.style.fontWeight = "900";
		spanishWordElement.style.position = "absolute";
		spanishWordElement.style.top = "-2.75em";
		spanishWordElement.style.left = "-1em";
		spanishWordElement.style.color = "#ff7b22";

		hoveredWordElement.appendChild(englishWordElement);
		hoveredWordElement.appendChild(spanishWordElement);

		const rows = document.querySelectorAll("#words-table tbody tr");

		let markedRows = JSON.parse(localStorage.getItem("markedRows")) || [];

		const updateMarkedCount = () => {
			markedCountElement.textContent = `${markedRows.length}`;
		};

		rows.forEach((row, index) => {
			const english = row.getAttribute("data-english");
			const spanish = row.getAttribute("data-spanish");

			if (markedRows.includes(index)) {
				row.classList.add("marked");
			}

			row.addEventListener("mouseenter", (event) => {
				englishWordElement.textContent = `${english}`;
				spanishWordElement.textContent = `${spanish}`;
			});

			row.addEventListener("mouseleave", () => {
				englishWordElement.textContent = "";
				spanishWordElement.textContent = "";
			});

			row.addEventListener("click", () => {
				row.classList.toggle("marked");

				if (row.classList.contains("marked")) {
					markedRows.push(index);
				} else {
					const rowIndex = markedRows.indexOf(index);
					if (rowIndex > -1) {
						markedRows.splice(rowIndex, 1);
					}
				}

				localStorage.setItem("markedRows", JSON.stringify(markedRows));
				updateMarkedCount();
			});
		});

		updateMarkedCount();

		// Borrar contenido del campo de búsqueda al hacer clic en el botón de eliminar
		deleteButton.addEventListener("click", () => {
			searchInput.value = "";
			filterTable("");
		});

		// Filtrar la tabla en tiempo real
		searchInput.addEventListener("input", () => {
			filterTable(searchInput.value);
		});

		// Limpiar campo de búsqueda cuando se presiona la tecla Escape
		searchInput.addEventListener("keydown", (event) => {
			if (event.key === "Escape") {
				searchInput.value = "";
				filterTable("");
			}
		});

		const filterTable = (searchValue) => {
			searchValue = searchValue.toLowerCase();

			rows.forEach((row) => {
				const english = row.getAttribute("data-english").toLowerCase();
				const spanish = row.getAttribute("data-spanish").toLowerCase();

				if (
					english.includes(searchValue) ||
					spanish.includes(searchValue)
				) {
					row.style.display = "";
				} else {
					row.style.display = "none";
				}
			});
		};
	});
</script>

<style>
	.important-text {
		color: white;
		padding: 1rem;
		background: linear-gradient(90deg, #f12711, #ff7b22);
	}
	.marked {
		background: linear-gradient(90deg, #f12711, #ff7b22) !important;
		color: white !important;
	}
	#search-img {
		filter: drop-shadow(0 0 0.05em #fafafa);
	}
</style>
