---
import Layout from "../layouts/Layout.astro";
import { words } from "../3000.js";
import search from "../icons/search.webp";
import arrow from "../icons/arrow.svg";
import arrow2 from "../icons/arrow2.svg";

// Mapear el objeto para obtener un array con las palabras en inglés y español
const mappedWords = Object.entries(words);
---

<Layout title="Most 3000 Common Words in English & Spanish">
	<div
		class="relative overflow-x-auto shadow-md sm:rounded-lg flex flex-col items-center justify-center">
		<button
			onclick="window.location.href = '/';"
			class="fixed top-0 text-sm -right-2 flex items-center flex-col group important-text rounded-bl-3xl hover:-translate-x-2 hover:scale-105 transition h-[75px] active:scale-100 active:translate-x-0 z-20 opacity-75 hover:opacity-100">
			<img
				src={arrow2.src}
				alt="arrow go top image"
				class="-rotate-[140deg] w-[25px] group-hover:scale-105 transition-all duration-250"
			/>
			<span class="text-black font-semibold"> Go Back </span>
		</button>
		<article class="xl:flex items-center justify-center h-full hidden z-10">
			<div
				class="flex items-center justify-center flex-col fixed bottom-0 top-0 left-[5%] w-[35vw]"
				id="text-container">
				<p
					class="text-6xl md:text-5xl font-black lg:text-6xl sm:text-1xl text-center">
					Most <br /> Common
				</p>
				<h1
					class="text-4xl lg:text-8xl font-black sm:text-1xl text-center md:py-5 mt-1 rounded-3xl overflow-hidden">
					<strong class="important-text">3000</strong>
				</h1>
				<span
					class="absolute whitespace-nowrap -translate-y-16 -rotate-12 text-4xl lg:text-8xl font-black sm:text-1xl text-center">
					Words <code
						class="text-4xl lg:text-6xl font-black sm:text-1xl text-center bg-gradient-to-r from-[#f12711] to-[#ff7b22] text-transparent bg-clip-text"
						>in</code
					>
				</span>
				<span
					class="flex -translate-y-32 items-center pt-40 text-6xl md:text-5xl font-black flex-col lg:text-6xl sm:text-1xl text-center">
					<span
						class="bg-gradient-to-r from-[#f12711] to-[#ff7b22] text-transparent bg-clip-text h-[70px]"
						>English</span
					>
					<img src={arrow.src} class="w-[100px] rotate-45" alt="" /> Spanish
				</span>
			</div>
			<div
				class="flex items-center justify-center flex-col fixed bottom-0 top-0 right-0 z-20 h-fit m-auto">
				<img src={search.src} class="w-[550px] -rotate-12" alt="" />

				<p
					id="hovered-word"
					class="text-3xl absolute transition delay-75 whitespace-nowrap">
					&nbsp;
				</p>
			</div>
		</article>
		<button
			onclick="window.scrollTo({
				top: 0,
				behavior: 'smooth'
				});"
			class="fixed left-0 text-sm -bottom-5 flex items-center flex-col group important-text rounded-t-3xl hover:-translate-y-2 hover:scale-105 transition size-[85px] active:scale-100 active:translate-y-0 z-20 opacity-75 hover:opacity-100">
			<img
				src={arrow2.src}
				alt="arrow go top image"
				class="-rotate-45 w-[25px] group-hover:scale-110 transition-all duration-250"
			/>
			<span class="text-black font-semibold"> Go Top </span>
		</button>

		<table
			id="words-table"
			class="w-full max-w-[400px] mt-20 text-center text-gray-400 z-0">
			<thead class="important-text fixed w-full max-w-[400px] top-0">
				<tr
					class="flex items-center jutify-center w-full py-3 sm:py-2 text-base sm:text-3xl">
					<th scope="col" class="w-full">English</th>
					<th scope="col" class="w-full">Español</th>
				</tr>
			</thead>
			<tbody>
				{
					mappedWords.map(([english, spanish], index) => (
						<tr
							class="group border-b border-gray-700  hover:bg-gray-600  bg-gray-900 font-semibold text-base hover:cursor-crosshair"
							data-english={english}
							data-spanish={spanish}>
							<td class=" py-1  text-gray-300">{english}</td>
							<td class=" py-1  text-gray-300">{spanish}</td>
						</tr>
					))
				}
			</tbody>
		</table>
	</div>
</Layout>

<script is:inline>
	document.addEventListener("DOMContentLoaded", () => {
		const hoveredWordElement = document.getElementById("hovered-word");

		const englishWordElement = document.createElement("p");
		const spanishWordElement = document.createElement("p");

		// Estilos en línea
		englishWordElement.style.fontSize = "1em";
		englishWordElement.style.fontWeight = "900";
		englishWordElement.style.position = "absolute";
		englishWordElement.style.top = "1em";
		englishWordElement.style.left = "-6.5em";
		englishWordElement.style.color = "#111827";

		spanishWordElement.style.fontSize = "1em";
		spanishWordElement.style.fontWeight = "900";
		spanishWordElement.style.position = "absolute";
		spanishWordElement.style.top = "-2.75em";
		spanishWordElement.style.left = "-1em";
		spanishWordElement.style.color = "#ff7b22";

		hoveredWordElement.appendChild(englishWordElement);
		hoveredWordElement.appendChild(spanishWordElement);

		const rows = document.querySelectorAll("#words-table tbody tr");

		// Recuperar filas marcadas desde localStorage
		const markedRows = JSON.parse(localStorage.getItem("markedRows")) || [];

		// Aplicar clase marcada a las filas que ya estaban seleccionadas
		rows.forEach((row, index) => {
			const english = row.getAttribute("data-english");
			const spanish = row.getAttribute("data-spanish");

			if (markedRows.includes(index)) {
				row.classList.add("marked");
			}

			row.addEventListener("mouseenter", (event) => {
				englishWordElement.textContent = `${english}`;
				spanishWordElement.textContent = `${spanish}`;
			});

			row.addEventListener("mouseleave", () => {
				englishWordElement.textContent = "";
				spanishWordElement.textContent = "";
			});

			// Manejar el clic en la fila para marcarla/desmarcarla
			row.addEventListener("click", () => {
				row.classList.toggle("marked");

				if (row.classList.contains("marked")) {
					// Añadir la fila marcada al array y guardarlo en localStorage
					markedRows.push(index);
				} else {
					// Quitar la fila desmarcada del array y guardarlo en localStorage
					const rowIndex = markedRows.indexOf(index);
					if (rowIndex > -1) {
						markedRows.splice(rowIndex, 1);
					}
				}

				// Guardar el estado actualizado en localStorage
				localStorage.setItem("markedRows", JSON.stringify(markedRows));
			});
		});
	});
</script>

<style>
	div {
		line-height: none !important;
	}
	.important-text {
		color: white;
		padding: 1rem;
		background: linear-gradient(90deg, #f12711, #ff7b22);
	}
	.marked {
		background: linear-gradient(90deg, #f12711, #ff7b22) !important;
		color: white !important;
	}
	#hovered-word {
		animation: appearEffect 0.7s ease-in-out;
	}

	@keyframes appearEffect {
		0% {
			opacity: 0;
			transform: translateY(30px) scale(0.8) rotate(-10deg);
		}
		50% {
			opacity: 0.5;
			transform: translateY(-10px) scale(1.05) rotate(5deg);
		}
		100% {
			opacity: 1;
			transform: translateY(0) scale(1) rotate(0deg);
		}
	}
</style>
